//============================================================================
// Name        : LEDDetectorTest.cpp
// Author      : Michael Darling
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/tracking.hpp>
#include "Threshold.h"
#include "KalmanFilter.h"
#include "FPSCounter.h"

int main() {


	// initialize camera and capture some frames
	cv::Mat frame;
	cv::VideoCapture cap(1);
	cap.set(CV_CAP_PROP_FRAME_WIDTH,640.0);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT,480.0);
	cap.set(CV_CAP_PROP_FPS,60);
	if (!cap.isOpened()) {
		return -1;
	}
	for(int i=0; i<20; i++) {
		cap >> frame;
	}


	// set blob parameters
	cv::SimpleBlobDetector::Params blobParams;
	blobParams.minThreshold = 225;
	blobParams.maxThreshold = 255;
	blobParams.thresholdStep = 5;
	blobParams.minDistBetweenBlobs = 8;
	blobParams.minArea = 5;
	blobParams.maxArea = 7500;
	blobParams.minCircularity = 0.25;
	blobParams.maxCircularity = 10.0;
	blobParams.minInertiaRatio = 0.55;
	blobParams.maxInertiaRatio = 1.45;
	blobParams.minConvexity = 0.0;
	blobParams.maxConvexity = 1.15;
	blobParams.blobColor = 255;  // I think this is red color (or is it "bright" pixels?)
	blobParams.filterByArea = true;
	blobParams.filterByColor = true;
	blobParams.filterByCircularity = false;
	blobParams.filterByInertia = true;
	blobParams.filterByConvexity = true;



	// create a threshold object
	Threshold myThreshObj;
	myThreshObj.set_params(blobParams);


	// Initialize Kalman Filter
	cv::KalmanFilter KF(4,1,0);  // # state variables, # measurement variables, # control variables, type

	// initialize the fps clock (15 frame moving average)
	FPSCounter FPSclk(15);



	for (; ;) {

		// capture a frame from camera
		cap >> frame;

		// compute and display the fps MAVG
		std::cout << FPSclk.fps() << std::endl;

		// separate RGB channels
		std::vector<cv::Mat> channels;
		cv::split(frame,channels);
		cv::Mat R, G, B;
		R = channels[2];
		G = channels[1];
		B = channels[0];
		frame = R;


		// detect blobs in image
		myThreshObj.set_image(frame);
		myThreshObj.detect_blobs();
		std::vector<cv::Point2f> imagePoints = myThreshObj.get_points();
		std::cout << "Number of blobs found -- " << imagePoints.size() << std::endl;




		// print blobs on image
		channels[0] = R;
		channels[1] = R;
		channels[2] = R;
		cv::merge(channels,frame);
		myThreshObj.createBlobsImage(frame,cv::Scalar(0,0,255.0));
		cv::namedWindow("Blobs");
		cv::imshow("Blobs",frame);

	}

}

